storm1
1:10
8,640:86,400

storm2
35:53
302,400:457,920

### Load data
data = np.load('test_both_final_short_01.npy')

### Pull states of need
WRRF_flow = data.item().get('WRRF_flow')
WRRF_TSSLoad = data.item().get('WRRF_TSSLoad')
t = data.item().get('time_state')

###Trim sections of interest
t_int = t[:]
WRRF_flow_int = WRRF_flow[:]
WRRF_TSSLoad_int = WRRF_TSSLoad[:]

### Pick dry-weather section
dw_flow = WRRF_flow[:]

### Duplicate and append dry-weather section to needed length
dw_flow = np.append(dw_flow,dw_flow) ...

### Trim dry-weather section to length of section of interest
dw_flow = dw_flow[:]

### Generate and subtract to get wet-weather section
ww_flow = np.zeros_like(dw_flow)
for i in range(0,len(dw_flow)):
	ww_flow[i] = WRRF_flow_int[i] - dw_flow[i]

### Repeat for TSSLoad

### Plot to double check
plt.plot(t_int,ww_flow); plt.plot(t_int,WRRF_flow_int); plt.plot(t_int,dw_flow); plt.show()

### Save storm section
storm1 = {'time': t_int, 'WRRF_flow': WRRF_flow_int, 'WRRF_TSSLoad': WRRF_TSSLoad_int, 'WRRF_flow_dry':dw_flow, 'WRRF_flow_wet':ww_flow, 'WRRF_TSSLoad_dry':dw_TSSLoad, 'WRRF_TSSLoad_wet':ww_TSSLoad}
np.save('storm1.npy',storm1)